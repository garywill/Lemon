//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 0 files.
  struct file {
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `ProgressHud_Fail_normal`.
    static let progressHud_Fail_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProgressHud_Fail_normal")
    /// Image `ProgressHud_Success_normal`.
    static let progressHud_Success_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProgressHud_Success_normal")
    /// Image `event_star`.
    static let event_star = Rswift.ImageResource(bundle: R.hostingBundle, name: "event_star")
    /// Image `tabbar_events`.
    static let tabbar_events = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_events")
    /// Image `tabbar_explore`.
    static let tabbar_explore = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_explore")
    /// Image `tabbar_profile`.
    static let tabbar_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_profile")
    
    /// `UIImage(named: "ProgressHud_Fail_normal", bundle: ..., traitCollection: ...)`
    static func progressHud_Fail_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.progressHud_Fail_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ProgressHud_Success_normal", bundle: ..., traitCollection: ...)`
    static func progressHud_Success_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.progressHud_Success_normal, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "event_star", bundle: ..., traitCollection: ...)`
    static func event_star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.event_star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_events", bundle: ..., traitCollection: ...)`
    static func tabbar_events(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_events, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_explore", bundle: ..., traitCollection: ...)`
    static func tabbar_explore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_explore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabbar_profile", bundle: ..., traitCollection: ...)`
    static func tabbar_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_profile, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `OAuthViewController`.
    static let oAuthViewController = _R.nib._OAuthViewController()
    
    /// `UINib(name: "OAuthViewController", in: bundle)`
    static func oAuthViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oAuthViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `RepoViewController`.
    static let repoViewController = _R.storyboard.repoViewController()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "RepoViewController", bundle: ...)`
    static func repoViewController(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.repoViewController)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _OAuthViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OAuthViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try repoViewController.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "tabbar_profile") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_profile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_explore") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_explore' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tabbar_events") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tabbar_events' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct repoViewController: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RepoViewController"
      let repoViewController = StoryboardViewControllerResource<RepoViewController>(identifier: "RepoViewController")
      
      func repoViewController(_: Void = ()) -> RepoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: repoViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.repoViewController().repoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'repoViewController' could not be loaded from storyboard 'RepoViewController' as 'RepoViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}